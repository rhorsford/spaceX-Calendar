!function(){var e,t,n=new Date,a=n.getMonth(),l=n.getFullYear(),c=document.getElementById("year"),o=document.getElementById("month"),d=document.querySelector("#calendar > thead > tr"),r=document.querySelector("#month"),u=document.querySelector("#year"),s=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],i=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],m=["2010","2011","2012","2013","2014","2015","2016","2017","2018","2019","2020","2021"],p=document.getElementById("monthAndYear"),g=document.getElementById("next"),h=document.getElementById("previous"),v=document.getElementById("month"),E=document.getElementById("year"),f=[],y=[];function T(){l=11===a?l+1:l,L(a=(a+1)%12,l)}function x(){l=0===a?l-1:l,L(a=0===a?11:a-1,l)}function I(){l=parseInt(c.value),L(a=parseInt(o.value),l)}function L(e,t){let a=new Date(t,e).getDay();var l=document.getElementById("calendar-body");results=(console.log(y,"array"),y.map(e=>({date:e.launch_date_local,text:e.mission_name}))),l.innerHTML="",p.innerHTML=s[e]+" "+t,c.value=t,o.value=e;let d=1;for(let c=0;c<6;c++){let o=document.createElement("tr");for(let l=0;l<7;l++)if(0===c&&l<a)cell=document.createElement("td"),cellText=document.createTextNode(""),cell.appendChild(cellText),o.appendChild(cell);else{if(d>32-new Date(t,e,32).getDate())break;{cell=document.createElement("td"),cellText=document.createTextNode(d),d===n.getDate()&&t===n.getFullYear()&&e===n.getMonth()&&cell.classList.add("bg-info"),console.log(results);var r=(e+1).toString();console.log(r);const a=results.filter(e=>e.date.includes("0"+r));console.log(a);for(var u=0;u<a.length;u++){var i=a[u].date.split(/-|T/g),m=a[u].text;console.log(i[2]),console.log(m),console.log(i);var g=parseInt(i[2]),h=parseInt(i[1]),v=parseInt(i[0]),E=m+" ("+i[3]+")";if(g===d&&v===t&&h===e+1){cell.classList.add("bg-space");var f=document.createElement("span");cell.appendChild(f),f.innerText=E}}cell.appendChild(cellText),o.appendChild(cell),d++}}l.appendChild(o)}}(e=new XMLHttpRequest).onreadystatechange=function(){4==e.readyState&&200==e.status&&(y=JSON.parse(e.responseText),console.log(y,"object"),f.concat(y),L(a,l))},e.open("GET","https://api.spacexdata.com/v3/launches/upcoming?launch_year=2020&filter=launch_date_local,mission_name",!0),e.send(),i.forEach((function(e){var t=document.createElement("th");t.innerText=e,d.append(t)})),t=0,s.forEach((function(e){var n=document.createElement("option");n.value=t++,n.innerText=e,r.append(n)})),m.forEach((function(e){var t=document.createElement("option");t.value=e,t.innerText=e,u.append(t)})),g.addEventListener("click",T),h.addEventListener("click",x),v.addEventListener("change",I),E.addEventListener("change",I)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
